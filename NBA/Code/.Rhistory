pc <- princomp(~ORtg_A+`Team_TSR`+`Team_eFGP`+`Team_USR`+`Team_PER`+`Team_Poss`,data= data)
pc$sdev
pc$loadings
summary(pc)
predict(pc)
#主成分分析
pc <- princomp(~`Team_TSR`+`Team_eFGP`+`Team_USR`+`Team_PER`+`Team_Poss`,data= data)
pc$sdev
pc$loadings
summary(pc)
predict(pc)
#主成分分析
pc <- princomp(~ORtg_A+`Team_TSR`+`Team_eFGP`+`Team_USR`+`Team_PER`+`Team_Poss`,data= data)
pc$sdev
pc$loadings
summary(pc)
#主成分分析
pc <- princomp(~`Team_TSR`+`Team_eFGP`+`Team_USR`+`Team_PER`,data= data)
pc$sdev
pc$loadings
summary(pc)
pc$loadings
#主成分分析
pc <- princomp(~ORtg_A+`Team_TSR`+`Team_eFGP`+`Team_USR`+`Team_PER`+`Team_Poss`,data= data)
pc$sdev
pc$loadings
predict(pc)
v1 <- predict(pc)
install.packages("pcr")
install.packages("pls")
library(pls)
?pcr
data_scale[c(1,5:9)]
data_scale
pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=F)
pc1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=F)
summary(pc1)
v1 <- scale(predict(pc))
v1
v1 <- unlist(scale(predict(pc)))
v1
v1[,1:3]
v1$win_ratio <- data_scale$`W/L%`
v1$win_ratio
v1
v1 <- scale(predict(pc)))
v1 <- scale(predict(pc))
v1
View(v1)
v1 <- scale(predict(pc))[,1:3]
View(v1)
v1$win_ratio <- data_scale$`W/L%`
View(v1)
v1 <- as.data.frame(scale(predict(pc))[,1:3])
v1$win_ratio <- data_scale$`W/L%`
v1
pc1 <- lm(win_ratio~.,data=v1)
summary(pc1)
pc1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=F)
coef(pc1)
pc1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=F,validation="CV")
pcr1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=F,validation="CV")
summary(pcr1)
coef(pc1)
predict(prc1)
predict(pcr1)
predict_result  <- predict(pcr1)
predict_result  <- predict(pcr1)
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
mse
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
pre_result <- pre_result*sd(data$`W/L%`)+mean(data$`W/L%`)
par(mfrow=c(1,1))
plot(pre_result,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
mse
predict_result  <- predict(pcr1)
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
mse
predict(pcr1)
predict_result
pre_result-data$`W/L%`
sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
pre_result
pre_result
sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
predict_result  <- predict(pcr1)
plot(pre_result,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
pre_result <- pre_result*sd(data$`W/L%`)+mean(data$`W/L%`)
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
plot(pre_result,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
mse
sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
pre_result
sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
mse
#
lm1 <- linearRidge(`W/L%`~.,data=data_scale[c(1,2,5:9)])
summary(lm1)
?linearRidge
lm1
#
lm1 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
lm1
summary(lm1)
predict_result  <- predict(lm1)
#
lm1 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
predict(lm1)
coef(lm1)
cf <-coef(lm1)
predict(lm1,data=data_scale[c(1,2,5:9)])
#
lm1 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
summary(lm1)
predict(lm1])
predict(lm1)
?linearRidge()
predict(lm1,data_scale[c(1,2,5:9)])
predict_result <- predict(lm1,data_scale[c(1,2,5:9)])
pre_result <- pre_result*sd(data$`W/L%`)+mean(data$`W/L%`)
pre_result
predict_result  <- predict(pcr1)
pre_result <- pre_result*sd(data$`W/L%`)+mean(data$`W/L%`)
pre_result
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
predict_result <- predict(lm1,data_scale[c(1,2,5:9)])
pre_result <- pre_result*sd(data$`W/L%`)+mean(data$`W/L%`)
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
mse
plot(pre_result,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
abline(a=1,b=0)
plot(pre_result,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=1,b=0)
abline(a=0,b=1)
data_scale
predict_result <- predict(lm1,data_scale[c(1,2,5:9)])
sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
plot(predict,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
plot(predict_result,data$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
plot(predict_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
plot(predict_result,data_scale$`W/L%`,main = "Ridge RegressionPredicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
pcr1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=T,validation="CV")
summary(pcr1)
coef(pc1)
predict_result  <- predict(pcr1)
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
predict_result  <- predict(pcr1)
sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
#
lm1 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
summary(lm1)
predict_result <- predict(lm1,data_scale[c(1,2,5:9)])
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
predict_result  <- predict(pcr1)
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
mse
#model3 glm
lm1 <- lm(`W/L%`~.,data=data_scale[c(1,5:9)])
summary(lm1)
########
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
plot(pre_result,data$`W/L%`,main = "Predicting Result",xlab="Principal Component Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Principal Component Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Principal Component Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
plot(predict_result,data_scale$`W/L%`,main = "Ridge RegressionPredicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
#
lm2 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
summary(lm2)
predict_result <- predict(lm2,data_scale[c(1,2,5:9)])
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Ridge RegressionPredicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
par(mfrow=c(1,3))
plot(predict_result,data_scale$`W/L%`,main = "Ridge RegressionPredicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Small VIF Variable Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
########
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
par(mfrow=c(1,1))
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Small VIF Variable Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
par(mfrow=c(1,3))
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Small VIF Variable Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
########
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Small VIF Variable Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
par(mfrow=c(1,3))
########
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Small VIF Variable Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
pcr1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=T,validation="CV")
summary(pcr1)
coef(pc1)
predict_result  <- predict(pcr1)
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data_scale$`W/L%`,main = "Predicting Result",xlab="Principal Component Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
par(mfrow=c(1,3))
#model3 glm
lm1 <- lm(`W/L%`~.,data=data_scale[c(1,5:9)])
########
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data_scale$`W/L%`,main = "Small VIF VariablePredicting Result",xlab=" Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
pcr1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=T,validation="CV")
summary(pcr1)
coef(pc1)
predict_result  <- predict(pcr1)
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
predict_result  <- predict(pcr1)
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
predict_result
data_scale$`W/L%`
sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
#
lm2 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
summary(lm2)
predict_result <- predict(lm2,data_scale[c(1,2,5:9)])
predict_result  <- predict(pcr1,data_scale[c(1,2,5:9)])
predict_result <- predict(lm2,data_scale[c(1,2,5:9)])
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Ridge RegressionPredicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
predict_result  <- predict(pcr1,data_scale[c(1,2,5:9)])
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
predict_result
predict(pcr1,data_scale[c(1,2,5:9)])[[, , 3 comps]]
predict(pcr1,data_scale[c(1,2,5:9)])[[`, , 3 comps`]]
predict(pcr1,data_scale[c(1,2,5:9)])[,,3]
predict_result  <- predict(pcr1,data_scale[c(1,2,5:9)])[,,3]
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
########
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data_scale$`W/L%`,main = "Small VIF VariablePredicting Result",xlab=" Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
mse <- sqrt(mean((pre_result-data$`W/L%`)^2,na.rm = T))
mse
pcr1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=T,validation="CV")
summary(pcr1)
coef(pc1)
predict_result  <- predict(pcr1,data_scale[c(1,2,5:9)])[,,3]
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
predict_result  <- predict(pcr1,data_scale[c(1,2,5:9)])[,,3]
mse
#
lm2 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
summary(lm2)
predict_result <- predict(lm2,data_scale[c(1,2,5:9)])
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
mse
library(dplyr)
library(readxl)
library(ggplot2)
library(e1071)
library(gridExtra)
library(DMwR)
library(rpart)
library('MASS')
library(ridge)
library(corrplot)
library(car)
library(pls)
Player_sta <- read_xlsx("/Users/sun/Desktop/NBA/2018-19.xlsx",sheet="Player_sta",col_names=T,na="NA")
Team_Name <- read_xlsx("/Users/sun/Desktop/NBA/2018-19.xlsx",sheet="Team_Name",col_names=T,na="NA")
Team_Result <- read_xlsx("/Users/sun/Desktop/NBA/2018-19.xlsx",sheet="Team_Result",col_names=T,na="NA")
Team_sta <- read_xlsx("/Users/sun/Desktop/NBA/2018-19.xlsx",sheet="Team_sta",col_names=T,na="NA")
Opponent_sta <- read_xlsx("/Users/sun/Desktop/NBA/2018-19.xlsx",sheet="Opponent_sta",col_names=T,na="NA")
Team_Result <- right_join(Team_Name,Team_Result,by=c("Full Name"="Full Name"))
Team_sta <- right_join(Team_Name,Team_sta,by=c("Full Name"="Full Name"))
Opponent_sta <- right_join(Team_Name,Opponent_sta,by=c("Full Name"="Full Name"))
Player_sta <- full_join(Team_sta,Player_sta,by=c("Short Name"="Tm"),keep=F)
Player_sta <- full_join(Team_Result,Player_sta,by=c("Short Name"="Short Name"),keep=F)
Player_sta <- full_join(Opponent_sta,Player_sta,by=c("Short Name"="Short Name"),keep=F)
#数据描述
plot(Player_sta$PTS,Player_sta$PTS.x,main="Offensive and Defensive Ratings in 2018-19",
xlab="Offensive ratings",ylab="Defensive ratings",col="red",pch=3)
abline(v=112,h=110,col = "gray60",lty=2)
VOP = Player_sta$PTS / (Player_sta$FGA - Player_sta$ORB + Player_sta$TOV + 0.44 * Player_sta$FTA)
DRB_percentage = (Player_sta$TRB - Player_sta$ORB) / Player_sta$TRB
factor = (2/3)-(0.5*(Player_sta$AST/Player_sta$FG))/(2*(Player_sta$FG/Player_sta$FT))
#构建PER
uPER = (1/Player_sta$MP.y)*(Player_sta$`3P.y`+(2/3)*Player_sta$AST.y+
(2-factor*(Player_sta$AST.x/Player_sta$FG.x))*Player_sta$FG.y+
(0.5*Player_sta$FT.y*(1+(1-(Player_sta$AST.x/Player_sta$FG.x))+(2/3)*
(Player_sta$AST.x/Player_sta$FG.x)))-VOP*Player_sta$TOV.y-VOP*DRB_percentage*
(Player_sta$FGA.y-Player_sta$FG.y)-VOP*0.44*(0.44+(0.56*DRB_percentage))*
(Player_sta$FTA.y-Player_sta$FT.y)+VOP*(1-DRB_percentage)*(Player_sta$TRB.y-
Player_sta$ORB.y)+VOP*DRB_percentage*Player_sta$ORB.y+VOP*Player_sta$STL.y+
VOP*(1-DRB_percentage)*(Player_sta$TRB.y-Player_sta$ORB.y)+VOP*DRB_percentage*
Player_sta$ORB.y+VOP*Player_sta$STL.y+VOP*DRB_percentage*Player_sta$BLK.y-
(Player_sta$FT-Player_sta$PF)-0.44*VOP*(Player_sta$FTA/Player_sta$PF))
#构建possesion
Possesion_team <- Player_sta$FGA.x+0.44*Player_sta$FTA.x-Player_sta$ORB.x+Player_sta$TOV.x
Possesion_opp <-  Player_sta$FGA+0.44*Player_sta$FTA-Player_sta$ORB+Player_sta$TOV
#构建节奏调整
Pace_adjust <- Possesion_opp/Possesion_team
PER_adjust <- uPER*Pace_adjust
#构建Usage percentage rate
USR <- ((Player_sta$FGA.y  + 0.44 *Player_sta$FTA.y +Player_sta$TOV.y) * (Player_sta$MP.x / 5)) /
( Player_sta$MP.y * (Player_sta$FGA.x + 0.44 * Player_sta$FGA.x + Player_sta$TOV.y))
#构建Effective Field Goal Percentage
eFGP <- (Player_sta$FG.y  + 0.5 * Player_sta$`3P.y`) / Player_sta$FGA
#构建TRUE shooting Rate
TSA <-  Player_sta$FGA.y + 0.44 * Player_sta$FTA.y
TSR <- Player_sta$PTS.y  / (2 * TSA)
#构建总体关于“率”的团队计算法###########
RATING <- function(x,y){
return(x*y/sum(x*y,na.rm = T))
}
TSR_min <- RATING(Player_sta$MP.y,TSR)*100
eFGP_min <- RATING(Player_sta$MP.y,eFGP)*100
USR_min <- RATING(USR,Player_sta$MP.y)*100
PER_min <- RATING(PER_adjust,Player_sta$MP.y)*100
Team_TSR <- aggregate(TSR_min,by=list(Player_sta$`Short Name`),mean,na.rm=T)$'x'
Team_eFGP <- aggregate(eFGP_min,by=list(Player_sta$`Short Name`),mean,na.rm=T)$'x'
Team_USR <- aggregate(USR_min,by=list(Player_sta$`Short Name`),mean,na.rm=T)$'x'
Team_PER <- aggregate(PER_min,by=list(Player_sta$`Short Name`),mean,na.rm=T)$'x'
Team_Poss <- aggregate(Possesion_team,by=list(Player_sta$`Short Name`),mean,na.rm=T)
####组成建模的数据
Rating_Team <- cbind(Team_TSR,Team_eFGP,Team_USR,Team_PER,Team_Poss)
colnames(Rating_Team) <- c("Team_TSR","Team_eFGP","Team_USR","Team_PER","Team","Team_Poss")
data <- right_join(Team_Result,Rating_Team,by=c("Short Name"="Team"))
data$Conf <- as.factor(data$Conf)
data$Div <- as.factor(data$Div)
data <- data[,c(2:8,12:21)]
summary(data)
####描述性分析
Mean <- apply(data[7:17], 2, mean,na.rm=T)
Median <- apply(data[7:17], 2, median,na.rm=T)
Sd <- apply(data[7:17], 2, sd,na.rm=T)
Max <- apply(data[7:17], 2, max,na.rm=T)
Min <- apply(data[7:17], 2, min,na.rm=T)
as.data.frame(cbind(Mean,Median,Sd,Max,Min))
#######考虑变量间的相关关系画图
corr <- cor(data[7:17])
corrplot(corr = corr,order="FPC",type="lower",tl.pos = "lt",tl.cex = 0.6)
corrplot(corr = corr,add=TRUE, type="upper", method="number",order="FPC",
col="black",diag=FALSE,tl.pos="n", cl.pos="n")
###因变量的分布图
h <-hist(data$`W/L%`,freq = T,breaks=12,main = "Distribution of Wining Ratio",
xlab="Wining Rate", ylab="Density")
rug(jitter(data$`W/L%`))
lines(density(data$`W/L%`), col="blue", lwd=2)
xfit<-seq(min(data$`W/L%`), max(data$`W/L%`), length=40)
yfit<-dnorm(xfit, mean=mean(data$`W/L%`), sd=sd(data$`W/L%`))
yfit <- yfit*diff(h$mids[1:2])*length(data$`W/L%`)
lines(xfit, yfit, col="red", lwd=2)
box()
legend(0.2,5,c("Red:Normal","Blue:WinR"),cex=0.6)
##正态检验
p1 <- qqPlot(data$`W/L%`,distribution = "norm",envelope = 0.9,main="Normal Test",ylab="WinR")
y <- pnorm(xfit, mean=mean(data$`W/L%`), sd=sd(data$`W/L%`))
shapiro.test(data$`W/L%`)
#boxplot
boxplot(`MOV/A`~Div, data = data,varwidth=TRUE,
col=c("gold","darkgreen"),main = "Margin of Vicotry by Division",
xlab = "Division", ylab = "MOV")
boxplot(`ORtg/A`~Div, data = data,varwidth=TRUE,
col=c("gold","darkgreen"),main = "Offensive Rate by Division",
xlab = "Division", ylab = "ORtg")
boxplot(`DRtg/A`~Div, data = data,varwidth=TRUE,
col=c("gold","darkgreen"),main = "Defensive Rate by Division",
xlab = "Division", ylab = "DRtg")
boxplot(`Team_TSR`~Div, data = data,varwidth=TRUE,
col=c("gold","darkgreen"),main = "True Shooting Rate by Division",
xlab = "Division", ylab = "TSR")
boxplot(`Team_eFGP`~Div, data = data,varwidth=TRUE,
col=c("gold","darkgreen"),main = "Effeciency Field Goal Percentage",
xlab = "Division", ylab = "eFGP")
boxplot(`Team_USR`~Div, data = data,varwidth=TRUE,
col=c("gold","darkgreen"),main = "Usage Rate by Division",
xlab = "Division", ylab = "USR")
boxplot(`Team_PER`~Div, data = data,varwidth=TRUE,
col=c("gold","darkgreen"),main = "PER by Division",
xlab = "Division", ylab = "PER")
#dotplot
data <- data[order(data$`MOV/A`,decreasing = T),]
dotchart(order(data$`MOV/A`,decreasing = T), labels=data$`Short Name`, cex=.7,
main="Margin of Victory by Conference",pch=3,
xlab="MoV",groups = data$Conf)
data <- data[order(data$`ORtg/A`,decreasing = T),]
dotchart(order(data$`ORtg/A`,decreasing = T), labels=data$`Short Name`, cex=.7,
main="Offensive Rating by Conference",pch=3,
xlab="ORtg",groups = data$Conf)
data <- data[order(data$`ORtg/A`,decreasing = T),]
dotchart(order(data$`ORtg/A`,decreasing = T), labels=data$`Short Name`, cex=.7,
main="Offensive Rating by Conference",pch=3,
xlab="ORtg",groups = data$Conf)
data <- data[order(data$`DRtg/A`,decreasing = T),]
dotchart(order(data$`DRtg/A`,decreasing = T), labels=data$`Short Name`, cex=.7,
main="Defensive Rating by Conference",pch=3,
xlab="DRtg",groups = data$Conf)
data <- data[order(data$Team_TSR,decreasing = T),]
dotchart(order(data$`Team_TSR`,decreasing = T), labels=data$`Short Name`, cex=.7,
main="True Shooting Rating by Conference",pch=3,
xlab="Team_TSR",groups = data$Conf)
data <- data[order(data$Team_USR,decreasing = T),]
dotchart(order(data$`Team_USR`,decreasing = T), labels=data$`Short Name`, cex=.7,
main="Team Usage Rating by Conference",pch=3,
xlab="Team_USR",groups = data$Conf)
data <- data[order(data$Team_PER,decreasing = T),]
dotchart(order(data$`Team_PER`,decreasing = T), labels=data$`Short Name`, cex=.7,
main="Team PER by Conference",pch=3,
xlab="Team_PER",groups = data$Conf)
data <- data[order(data$`Team_Poss`,decreasing = T),]
dotchart(order(data$`Team_Poss`,decreasing = T), labels=data$`Short Name`, cex=.7,
main="Team possesion by Conference",pch=3,
xlab="Team_Poss",groups = data$Conf)
data_scale <- as.data.frame(scale(data[,c(7,10:17)]))
#model3 glm
lm1 <- lm(`W/L%`~.,data=data_scale[c(1,5:9)])
summary(lm1)
vif(lm1)
lm1 <- lm(`W/L%`~.,data=data_scale[c(1,5:9)])
summary(lm1)
par(mfrow=c(2,2))
plot(lm1)
#
lm2 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
summary(lm2)
predict_result <- predict(lm2,data_scale[c(1,2,5:9)])
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Ridge RegressionPredicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
#主成分分析
pc <- princomp(~ORtg_A+`Team_TSR`+`Team_eFGP`+`Team_USR`+`Team_PER`+`Team_Poss`,data= data)
pc$sdev
pc$loadings
summary(pc)
v1 <- predict(pc)
pcr1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=T,validation="CV")
summary(pcr1)
coef(pc1)
predict_result  <- predict(pcr1,data_scale[c(1,2,5:9)])[,,3]
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
lm1 <- lm(`W/L%`~.,data=data_scale[c(1,5:9)])
predict_result <- predict(lm1,data_scale[c(1,2,5:9)])
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
par(mfrow=c(2,2))
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
#
lm2 <- linearRidge(`W/L%`~.,lambda = "automatic",data=data_scale[c(1,2,5:9)])
summary(lm2)
predict_result <- predict(lm2,data_scale[c(1,2,5:9)])
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Ridge RegressionPredicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
#主成分分析
pc <- princomp(~ORtg_A+`Team_TSR`+`Team_eFGP`+`Team_USR`+`Team_PER`+`Team_Poss`,data= data)
pc$sdev
pc$loadings
summary(pc)
v1 <- predict(pc)
pcr1 <- pcr(`W/L%`~.,data=data_scale[c(1,2,5:9)],ncomp=3,method = pls.options()$pcralg,scale=T,validation="CV")
summary(pcr1)
coef(pc1)
predict_result  <- predict(pcr1,data_scale[c(1,2,5:9)])[,,3]
mse <- sqrt(mean((predict_result-data_scale$`W/L%`)^2,na.rm = T))
plot(predict_result,data_scale$`W/L%`,main = "Principal Component Predicting Result",xlab="Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
########
pre_result <- round(predict(lm1,data_scale[c(1,5:9)]),3)
mse <- sqrt(mean((pre_result-data_scale$`W/L%`)^2,na.rm = T))
plot(pre_result,data_scale$`W/L%`,main = "Small VIF VariablePredicting Result",xlab=" Predicted Value",ylab="Real Value",pch=15,col="red")
abline(a=0,b=1)
